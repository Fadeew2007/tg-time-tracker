import logging
from datetime import datetime

import requests
import pytz

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from bot.config import API_URL

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()
user_tokens = {}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    filename="button_logs.txt",
    level=logging.INFO,
    format="%(asctime)s - %(message)s",
    datefmt="%d-%m-%Y %H:%M:%S"
)

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∏—î–≤–∞
kyiv_tz = pytz.timezone("Europe/Kyiv")

def log_button_press(user_id, username, button_text):
    """–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Å—É –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ —É –ª–æ–≥"""
    log_entry = f"{datetime.now(kyiv_tz).strftime('%d-%m-%Y %H:%M:%S')} | User ID: {user_id} | Username: {username} | Button: {button_text}"
    logging.info(log_entry)
    print(log_entry)  # –í–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ

class ReportState(StatesGroup):
    choosing_worker = State()
    choosing_year = State()
    choosing_month = State()


@router.message(Command("start"))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or f"user_{telegram_id}"

    response = requests.post(f"{API_URL}auth/", json={"telegram_id": telegram_id, "username": username})

    if response.status_code == 200:
        data = response.json()
        user_tokens[telegram_id] = data["token"]

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"), KeyboardButton(text="üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏"), KeyboardButton(text="üìã –ó–≤—ñ—Ç")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            "üç∞ –í—ñ—Ç–∞—î–º–æ –≤ DESSEE!\n\n"
            "üìå –ö–æ–º–∞–Ω–¥–∏:\n"
            "‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É ‚Äì —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É\n"
            "‚è∏ –ü–∞—É–∑–∞ ‚Äì –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –Ω–∞ –ø–∞—É–∑—É\n"
            "‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ ‚Äì –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É –ø—ñ—Å–ª—è –ø–∞—É–∑–∏\n"
            "üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏ ‚Äì –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É\n\n"
            "üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏ ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏\n\n"
            "üìã –ó–≤—ñ—Ç ‚Äì –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤\n\n"
            "‚ö° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É!",
            reply_markup=keyboard
        )
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")


@router.message(Command("start_work"))
async def start_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    log_button_press(telegram_id, message.from_user.username, "‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}start_work/", headers={"Authorization": f"Token {token}"})
    data = response.json()

    if response.status_code == 200:
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É —Ä–æ–±–æ—Ç–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞"), KeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏")],
                [KeyboardButton(text="üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏"), KeyboardButton(text="üìã –ó–≤—ñ—Ç")]
            ],
            resize_keyboard=True
        )

        await message.answer("‚úÖ –†–æ–±–æ—Ç—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!üåû", reply_markup=keyboard)
    else:
        await message.answer(data.get("error", "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É."))

@router.message(Command("pause_work"))
async def pause_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    log_button_press(telegram_id, message.from_user.username, "‚è∏ –ü–∞—É–∑–∞")

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}pause_work/", headers={"Authorization": f"Token {token}"})
    data = response.json()

    if response.status_code == 200:
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –ø–∞—É–∑–∏ —Ä–æ–±–æ—Ç–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏"), KeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏")],
                [KeyboardButton(text="üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏"), KeyboardButton(text="üìã –ó–≤—ñ—Ç")]
            ],
            resize_keyboard=True
        )

        await message.answer("‚è∏ –†–æ–±–æ—Ç–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É!", reply_markup=keyboard)
    else:
        await message.answer(data.get("error", "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó."))

@router.message(Command("resume_work"))
async def resume_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    log_button_press(telegram_id, message.from_user.username, "‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏")

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}resume_work/", headers={"Authorization": f"Token {token}"})
    data = response.json()

    if response.status_code == 200:
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞"), KeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏")],
                [KeyboardButton(text="üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏"), KeyboardButton(text="üìã –ó–≤—ñ—Ç")]
            ],
            resize_keyboard=True
        )

        await message.answer("‚ñ∂Ô∏è –†–æ–±–æ—Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=keyboard)
    else:
        await message.answer(data.get("error", "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î —Å–µ—Å—ñ—ó –Ω–∞ –ø–∞—É–∑—ñ."))

@router.message(Command("stop_work"))
async def stop_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    log_button_press(telegram_id, message.from_user.username, "üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏")

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}stop_work/", headers={"Authorization": f"Token {token}"})
    data = response.json()

    if response.status_code == 200:
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")],
                [KeyboardButton(text="üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏"), KeyboardButton(text="üìã –ó–≤—ñ—Ç")]
            ],
            resize_keyboard=True
        )

        await message.answer("‚úÖ –†–æ–±–æ—á–∞ –∑–º—ñ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–±–æ—Ç—É!", reply_markup=keyboard)
    else:
        await message.answer(data.get("error", "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏."))


@router.message(Command("my_hours"))
async def my_hours(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.get(f"{API_URL}my_hours/", headers={"Authorization": f"Token {token}"})
    data = response.json()

    if response.status_code == 200:
        if "error" in data:
            await message.answer(data["error"])
            return

        summary = data["summary"]
        days_list = "\n".join(data["days"])

        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚è™ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å")]],
            resize_keyboard=True
        )

        await message.answer(f"{summary}\n\n{days_list}", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–¥–∏–Ω.")@router.message(Command("my_hours"))
async def my_hours(message: types.Message):
    """–û—Ç—Ä–∏–º—É—î –≥–æ–¥–∏–Ω–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'"""
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.get(f"{API_URL}my_hours/", headers={"Authorization": f"Token {token}"})
    data = response.json()

    if response.status_code == 200:
        if "error" in data:
            await message.answer(data["error"])
            return

        summary = data["summary"]
        days_list = "\n".join(data["days"])

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )

        await message.answer(f"{summary}\n\n{days_list}", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–¥–∏–Ω.")

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏"""
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó
    response = requests.get(f"{API_URL}active_session/", headers={"Authorization": f"Token {token}"})
    data = response.json()

    if response.status_code == 200 and data.get("active", False):
        # –Ø–∫—â–æ —Å–µ—Å—ñ—è –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞—É–∑–∏ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è∏ –ü–∞—É–∑–∞"), KeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏")],
                [KeyboardButton(text="üìã –ó–≤—ñ—Ç")],
                [KeyboardButton(text="üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏")]
            ],
            resize_keyboard=True
        )
    else:
        # –Ø–∫—â–æ —Å–µ—Å—ñ—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")],
                [KeyboardButton(text="üìã –ó–≤—ñ—Ç")],
                [KeyboardButton(text="üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏")]
            ],
            resize_keyboard=True
        )

    await message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=keyboard)


@router.message(Command("report"))
async def start_report(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.get(f"{API_URL}admin/workers/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200 and response.json():
        workers = response.json()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=worker["name"])] for worker in workers],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(ReportState.choosing_worker)
        await state.update_data(workers=workers)
        await message.answer("üë§ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.")


@router.message(ReportState.choosing_worker)
async def choose_year(message: types.Message, state: FSMContext):
    data = await state.get_data()
    worker = next((w for w in data["workers"] if w["name"] == message.text), None)

    if not worker:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    response = requests.get(f"{API_URL}admin/years/{worker['id']}/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200 and response.json():
        years = response.json()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(year))] for year in years],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(ReportState.choosing_year)
        await state.update_data(worker=worker)
        await message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –∂–æ–¥–µ–Ω —Ä—ñ–∫.")


@router.message(ReportState.choosing_year)
async def choose_month(message: types.Message, state: FSMContext):
    data = await state.get_data()
    worker, year = data["worker"], message.text

    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    response = requests.get(f"{API_URL}admin/months/{worker['id']}/{year}/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200 and response.json():
        months = response.json()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(month))] for month in months],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(ReportState.choosing_month)
        await state.update_data(year=year)
        await message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –∂–æ–¥–µ–Ω –º—ñ—Å—è—Ü—å.")


@router.message(ReportState.choosing_month)
async def show_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    worker, year, month = data["worker"], data["year"], message.text

    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    response = requests.get(f"{API_URL}admin/report/{worker['id']}/{year}/{month}/", headers={"Authorization": f"Token {token}"})
    
    await state.clear()

    if response.status_code == 200:
        report = response.json().get("report", "‚ùå –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        await message.answer(report)
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É.")

@router.message(F.text == "‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")
async def button_start_work(message: types.Message):
    await start_work(message)

@router.message(F.text == "‚è∏ –ü–∞—É–∑–∞")
async def button_pause_work(message: types.Message):
    await pause_work(message)

@router.message(F.text == "‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏")
async def button_resume_work(message: types.Message):
    await resume_work(message)

@router.message(F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def button_stop_work(message: types.Message):
    await stop_work(message)

@router.message(F.text == "üìä –ú–æ—ó –≥–æ–¥–∏–Ω–∏")
async def button_my_hours(message: types.Message):
    await my_hours(message)

@router.message(F.text == "üìã –ó–≤—ñ—Ç")
async def button_report(message: types.Message, state: FSMContext):
    await start_report(message, state)