from aiogram import Router, types, F
from aiogram.filters import Command
import requests
from bot.config import API_URL

router = Router()
user_tokens = {}  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–∞–º‚Äô—è—Ç—ñ (—Ç–∏–º—á–∞—Å–æ–≤–æ)

@router.message(Command("start"))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or f"user_{telegram_id}"

    response = requests.post(f"{API_URL}auth/", json={"telegram_id": telegram_id, "username": username})
    
    if response.status_code == 200:
        data = response.json()
        user_tokens[telegram_id] = data["token"]
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /start_work, /stop_work, /my_hours, /report –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É.")
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")

@router.message(Command("start_work"))
async def start_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}start_work/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200:
        await message.answer("–†–æ–±–æ—Ç—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!")
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É.")

@router.message(Command("stop_work"))
async def stop_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}stop_work/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200:
        await message.answer("–†–æ–±–æ—á–∞ –∑–º—ñ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏.")

@router.message(Command("my_hours"))
async def my_hours(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.get(f"{API_URL}my_hours/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200:
        data = response.json()
        text = "\n".join([f"{item['start_time']} - {item.get('end_time', '–©–µ —Ç—Ä–∏–≤–∞—î')}" for item in data])
        await message.answer(f"–¢–≤–æ—ó –≥–æ–¥–∏–Ω–∏:\n{text}")
    else:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–¥–∏–Ω.")

@router.message(Command("report"))
async def admin_report(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.get(f"{API_URL}admin/report/", headers={"Authorization": f"Token {token}"})
    
    if response.status_code == 200:
        data = response.json()
        if not data:
            await message.answer("üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏.")
            return

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç —á–∞—Å—Ç–∏–Ω–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ª—ñ–º—ñ—Ç—É Telegram
        for chunk in [data[i:i+4096] for i in range(0, len(data), 4096)]:
            await message.answer(chunk)
    
    elif response.status_code == 403:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—å–æ–≥–æ –∑–≤—ñ—Ç—É.")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É.")
