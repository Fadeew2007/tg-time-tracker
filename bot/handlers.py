import requests

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from bot.config import API_URL

router = Router()
user_tokens = {}  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–∞–º‚Äô—è—Ç—ñ (—Ç–∏–º—á–∞—Å–æ–≤–æ)


class ReportState(StatesGroup):
    choosing_worker = State()
    choosing_year = State()
    choosing_month = State()


@router.message(Command("start"))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or f"user_{telegram_id}"

    response = requests.post(f"{API_URL}auth/", json={"telegram_id": telegram_id, "username": username})

    if response.status_code == 200:
        data = response.json()
        user_tokens[telegram_id] = data["token"]
        await message.answer("–ü—Ä–∏–≤—ñ—Ç! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /start_work, /stop_work, /my_hours, /report –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É.")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")


@router.message(Command("start_work"))
async def start_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}start_work/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200:
        await message.answer("‚úÖ –†–æ–±–æ—Ç—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É.")


@router.message(Command("stop_work"))
async def stop_work(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.post(f"{API_URL}stop_work/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200:
        await message.answer("‚úÖ –†–æ–±–æ—á–∞ –∑–º—ñ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏.")


@router.message(Command("my_hours"))
async def my_hours(message: types.Message):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.get(f"{API_URL}my_hours/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200:
        data = response.json()
        text = "\n".join([f"{item['start_time']} - {item.get('end_time', '–©–µ —Ç—Ä–∏–≤–∞—î')}" for item in data])
        await message.answer(f"üïí –¢–≤–æ—ó –≥–æ–¥–∏–Ω–∏:\n{text}")
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ–¥–∏–Ω.")


@router.message(Command("report"))
async def start_report(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    if not token:
        await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–µ—Ä—à—É –≤–≤–µ–¥—ñ—Ç—å /start –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
        return

    response = requests.get(f"{API_URL}admin/workers/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200 and response.json():
        workers = response.json()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=worker["name"])] for worker in workers],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(ReportState.choosing_worker)
        await state.update_data(workers=workers)
        await message.answer("üë§ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.")


@router.message(ReportState.choosing_worker)
async def choose_year(message: types.Message, state: FSMContext):
    data = await state.get_data()
    worker = next((w for w in data["workers"] if w["name"] == message.text), None)

    if not worker:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    response = requests.get(f"{API_URL}admin/years/{worker['id']}/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200 and response.json():
        years = response.json()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(year))] for year in years],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(ReportState.choosing_year)
        await state.update_data(worker=worker)
        await message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –∂–æ–¥–µ–Ω —Ä—ñ–∫.")


@router.message(ReportState.choosing_year)
async def choose_month(message: types.Message, state: FSMContext):
    data = await state.get_data()
    worker, year = data["worker"], message.text

    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    response = requests.get(f"{API_URL}admin/months/{worker['id']}/{year}/", headers={"Authorization": f"Token {token}"})
    if response.status_code == 200 and response.json():
        months = response.json()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(month))] for month in months],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await state.set_state(ReportState.choosing_month)
        await state.update_data(year=year)
        await message.answer("üìÖ –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –∂–æ–¥–µ–Ω –º—ñ—Å—è—Ü—å.")


@router.message(ReportState.choosing_month)
async def show_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    worker, year, month = data["worker"], data["year"], message.text

    telegram_id = message.from_user.id
    token = user_tokens.get(telegram_id)

    response = requests.get(f"{API_URL}admin/report/{worker['id']}/{year}/{month}/", headers={"Authorization": f"Token {token}"})
    
    await state.clear()

    if response.status_code == 200:
        report = response.json().get("report", "‚ùå –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        await message.answer(report)
    else:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É.")
